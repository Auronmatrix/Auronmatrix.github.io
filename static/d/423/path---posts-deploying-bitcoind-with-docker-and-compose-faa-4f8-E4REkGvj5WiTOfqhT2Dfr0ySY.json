{"data":{"site":{"siteMetadata":{"title":"Aubrey Oosthuizen Blog","subtitle":"Thoughts on coding, crypto and other tidbits.","copyright":"© All rights reserved.","author":{"name":"Aubrey Oosthuizen","twitter":"#a21n"},"disqusShortname":"","url":"https://lumen.netlify.com"}},"markdownRemark":{"id":"1d8d8227-b6f2-54c4-b9b8-4f5959162b9a","html":"<h2>Running your own bitcoind full node with docker/docker-compose</h2>\n<p>While developing different bitcoin tools, the requirement of spinning up a new full node for testing comes up quite often.</p>\n<p>In order to speed up this process, I’ve come to build and run bitcoin-core inside a docker container quite often.</p>\n<p>I’ve created a bootstrapping repo <a href=\"https://github.com/Auronmatrix/bitcoind-docker\">bitcoind-docker</a> based on the work of <a href=\"https://github.com/ruimarinho\">@ruimarinho</a> adding some small fixes, docker-compose and rpcauth script for generating rpc user and the example bitcoin.conf file from bitcoin-core. </p>\n<h4>1. Clone:</h4>\n<ul>\n<li><code class=\"language-text\">git clone https://github.com/Auronmatrix/bitcoind-docker</code></li>\n<li><code class=\"language-text\">cd bitcoind-docker</code></li>\n</ul>\n<h4>2. Configure</h4>\n<p>Configure the bitcoin.conf file to be relevant to your requirements. Commonly used commands include -server=1, -printtoconsole=1 and -regtest=1. These commands can also be added to the compose file under the <code class=\"language-text\">command</code> property.</p>\n<p>See the bitcoin.conf for details on available commands.</p>\n<h4>3. Enable RPC</h4>\n<p>If you wish to enable the bitcoind rpc server, you should generate the login credentials for the RPC-USER.</p>\n<ul>\n<li><code class=\"language-text\">cd rpcauth</code></li>\n<li><code class=\"language-text\">python3 rpcauth.py yourusername yoursupersecretpassword</code> </li>\n</ul>\n<p>Copy output to <code class=\"language-text\">bitcoin.conf</code> or add as command to <code class=\"language-text\">docker-compose.yml</code>. Make sure you set <code class=\"language-text\">-server=1</code> in either and check out the rpc binding options for allowing rpc access from outside the container.</p>\n<h4>4. Building and running</h4>\n<p>Once the config has been set up, run the container</p>\n<ul>\n<li><code class=\"language-text\">docker-compose build</code></li>\n<li><code class=\"language-text\">docker-compose up -d</code></li>\n</ul>\n<p>View the logs with <code class=\"language-text\">docker-compose logs -f</code></p>\n<p>This should be enough to get you started with running your own bitcoin node. Make sure to study up the different configuration options. </p>","fields":{"tagSlugs":["/tags/docker/","/tags/bitcoin/","/tags/nodes/","/tags/docker-compose/"]},"frontmatter":{"title":"Running your own Bitcoin full node with Docker","tags":["Docker","Bitcoin","Nodes","Docker-compose"],"date":"2018-10-15","description":"Running your own bitcoind full node with docker/docker-compose"}}},"pageContext":{"slug":"/posts/deploying-bitcoind-with-docker-and-compose/"}}