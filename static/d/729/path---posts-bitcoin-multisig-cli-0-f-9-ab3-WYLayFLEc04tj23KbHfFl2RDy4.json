{"data":{"site":{"siteMetadata":{"title":"Aubrey Oosthuizen Blog","subtitle":"Thoughts on coding, crypto and other tidbits.","copyright":"© All rights reserved.","author":{"name":"Aubrey Oosthuizen","twitter":"#a21n"},"disqusShortname":"","url":"https://lumen.netlify.com"}},"markdownRemark":{"id":"3838d79d-5aaa-51b4-b01f-2d42a843d547","html":"<p>After a friend asked me how multisig in bitcoin works, I did a little experimenting and found the following method for setting up a multisig address with bitcoin-cli, generating a transaction and signing it with 2/3 before broadcasting it.</p>\n<h3>Disclaimer</h3>\n<blockquote>\n<p>This technique should not be used for setting up real addresses. It creates 3 addresses in the same wallet (which makes no sense in the real world). Therefore, this post is merely for educational purposes (mostly mine).</p>\n</blockquote>\n<h3>0. Setup</h3>\n<p>Prerequisite: Docker + docker-compose (<a href=\"https://docs.docker.com/docker-for-mac/install/\">Mac</a>, <a href=\"https://docs.docker.com/install/#supported-platforms\">Platforms</a>) </p>\n<h3>Setup your bitcoind node</h3>\n<ol start=\"0\">\n<li>\n<p>Get starter (<a href=\"https://github.com/Auronmatrix/bitcoind-docker\">bitcoind-docker</a>)</p>\n<ul>\n<li>If you can use git, you can clone the repo otherwise simply download the zip file, extract it and open the folder in your terminal</li>\n</ul>\n</li>\n<li>\n<p>Add the following content to the bitcoin.conf file which enables RPC and sets our node to use testnet</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">printtoconsole=1\ntestnet=1\nserver=1\nrpcport=8332\nprune=2000</code></pre></div>\n<ol start=\"2\">\n<li>run <code class=\"language-text\">docker-compose up -d</code></li>\n<li>open a new terminal tab (cmd+t)</li>\n<li>run <code class=\"language-text\">docker-compose logs -f</code> and wait for the node to fully sync</li>\n</ol>\n<blockquote>\n<p>You will need to wait for your node to fully sync.</p>\n</blockquote>\n<p> *** Note: To stop the docker-container run <code class=\"language-text\">docker-compose down</code>. To delete the blockchain content delete the <code class=\"language-text\">data</code> folder in the bitcoin-node folder</p>\n<h3>Shell into your node</h3>\n<ol>\n<li>run <code class=\"language-text\">docker ps</code> and check the docker container id (C_ID) of your bitcoin node</li>\n<li>run <code class=\"language-text\">docker exec -it C_ID /bin/sh</code></li>\n</ol>\n<p>Now you’re inside the docker container with a fully synced bitcoind node on testnet.</p>\n<h3>1. Create addresses</h3>\n<p>*** Note: Wherever you see these greater than/smaller brackets, you need to replace the value with some output/variable with the name inside the bracked <code class=\"language-text\">&lt;VARIABLE&gt;</code>. You can see the Variable names next to the example output e.g. <code class=\"language-text\">Example Output: TXID</code> will show the value you need to substitute everywhere where you see <code class=\"language-text\">&lt;TXID&gt;</code></p>\n<p>You will need to create a couple (n) new bitcoin addresses to use in the multisig address. In reality, these would not be created on the same machine/node using the same wallet, but by different parties.</p>\n<p>*** Where <code class=\"language-text\">n</code> is the number of addresses you want to use in the multisig address</p>\n<p>Run <code class=\"language-text\">bitcoin-cli getnewaddress</code> * n</p>\n<p>Example Output: ADDR(n)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2N3fquuLoTkecwMpBmLiyGzF18R7LLn2dWW</code></pre></div>\n<p>You will need some money to send to the multisig address. For educational purposes, let’s send some coins to our new <code class=\"language-text\">ADDR(n)</code> address first and then send it on to our multisig address once it has been created.</p>\n<p>Visit: <a href=\"https://testnet.manu.backend.hamburg/faucet\">A Testnet Faucet</a> and send some coins to an address you’ve just created.</p>\n<p>*** You can check if the transaction is confirmed by using <code class=\"language-text\">bitcoin-cli gettransaction &lt;FAUCET_TXID&gt;</code>, where FAUCET_TXID is the transaction ID returned by the faucet</p>\n<h4>2. Get address Pubkey’s</h4>\n<p>We will need to get the public keys for all the addresses we want to use in our multisig address. To get the public key of an address use run the following cli command:</p>\n<p><code class=\"language-text\">bitcoin-cli validateaddress &lt;ADDR(n)&gt;</code></p>\n<p>*** Where ADDR(n) is 0..n of the addresses we just generated</p>\n<p>Example Output: ADDR(n)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;isvalid&quot;: true,\n  &quot;address&quot;: &quot;2N3fquuLoTkecwMpBmLiyGzF18R7LLn2dWW&quot;,\n  &quot;scriptPubKey&quot;: &quot;a91472593aaa24c469f1d09af92e13268e2ec8131b7d87&quot;,\n  &quot;ismine&quot;: true,\n  &quot;iswatchonly&quot;: false,\n  &quot;isscript&quot;: true,\n  &quot;iswitness&quot;: false,\n  &quot;script&quot;: &quot;witness_v0_keyhash&quot;,\n  &quot;hex&quot;: &quot;001492dea8f0ae7ed7d17cdd71efbd42244457a04a7f&quot;,\n  &quot;pubkey&quot;: &quot;02d55b98c30f17bb20a01cbd3e2a58cb607fc088d9b12b2415e09cc122c2827b24&quot;, // &lt;-- Note this\n  &quot;embedded&quot;: {\n    &quot;isscript&quot;: false,\n    &quot;iswitness&quot;: true,\n    &quot;witness_version&quot;: 0,\n    &quot;witness_program&quot;: &quot;92dea8f0ae7ed7d17cdd71efbd42244457a04a7f&quot;,\n    &quot;pubkey&quot;: &quot;02d55b98c30f17bb20a01cbd3e2a58cb607fc088d9b12b2415e09cc122c2827b24&quot;,\n    &quot;address&quot;: &quot;tb1qjt023u9w0mtazlxaw8hm6s3yg3t6qjnlfqdnz5&quot;,\n    &quot;scriptPubKey&quot;: &quot;001492dea8f0ae7ed7d17cdd71efbd42244457a04a7f&quot;\n  },\n  &quot;addresses&quot;: [\n    &quot;tb1qjt023u9w0mtazlxaw8hm6s3yg3t6qjnlfqdnz5&quot;\n  ],\n  &quot;account&quot;: &quot;&quot;,\n  &quot;timestamp&quot;: 1531559244,\n  &quot;hdkeypath&quot;: &quot;m/0&#39;/0&#39;/5&#39;&quot;\n}</code></pre></div>\n<p>Take note of the pubkey for each address for example here is the <code class=\"language-text\">address : pubkey</code> for mine:</p>\n<p><code class=\"language-text\">2N3fquuLoTkecwMpBmLiyGzF18R7LLn2dWW : 02d55b98c30f17bb20a01cbd3e2a58cb607fc088d9b12b2415e09cc122c2827b24</code></p>\n<h3>3. Create MULTISIG Address</h3>\n<p>Once we have the public key (pubkey) for each address we want to use in the multisig address we can create the multisig address with the following command: </p>\n<p><code class=\"language-text\">bitcoin-cli createmultisig &lt;REQUIRED_SIGS&gt; &quot;[\\&quot;&lt;PUBKEY(0)&gt;\\&quot;, \\&quot;&lt;PUBKEY(1)&gt;\\&quot;, ... \\&quot;&lt;PUBKEY(n)&gt;\\&quot;]</code></p>\n<p>*** &#x3C;REQUIRED_SIGS> = replace this with the actual number of signatures required e.g. for a 3 of 5 address, this parameter would be <code class=\"language-text\">3</code> and the 0..n array afterwards would be the pubkey of addresses 0 to 5</p>\n<p>Example Output: MULTISIGADDR / REDEEM_SCRIPT</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;address&quot;: &quot;2NDhNJBynBdrFFkXJJscPhnocwLiiyzoEtE&quot;,\n  &quot;redeemScript&quot;: &quot;522103c8d1554f1029e6fa737b086b408f56a4f468541671230a4288e1f0290051aba621023af945dee9e7fdad745b62b817347eaf0efef84f752f03fbb80a82de61bdd6f62103f18f621896dd4954b593c56fe74530c139c54e372c52a43c15a5a4e89d26cf9153ae&quot;\n}</code></pre></div>\n<p>Now we have a new multisig address (MULTISIGADDR) <code class=\"language-text\">2NDhNJBynBdrFFkXJJscPhnocwLiiyzoEtE</code> with the script to redeem any bitcoin sent to this address (REDEEM_SCRIPT) <code class=\"language-text\">522103c...153ae</code></p>\n<h3>4. Send some money to the multisig address</h3>\n<p>Let’s send some money from our address we created in step 1 to our new multisig address:</p>\n<p><code class=\"language-text\">bitcoin-cli sendtoaddress &lt;MULTISIGADDR&gt; &lt;AMMOUNT&gt;</code></p>\n<p>Example Output: TXID</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">5b823105e7d1d6d0c126cb7c3f263de970690d514d846eb317899df2e59ddf2f</code></pre></div>\n<p><code class=\"language-text\">bitcoin-cli gettransaction &lt;TXID&gt;</code></p>\n<p>Example Output: TX</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;amount&quot;: -0.50000000,\n  &quot;fee&quot;: -0.00000241,\n  &quot;confirmations&quot;: 0,\n  &quot;trusted&quot;: true,\n  &quot;txid&quot;: &quot;TXID&quot;,\n  &quot;walletconflicts&quot;: [\n  ],\n  &quot;time&quot;: 1531660754,\n  &quot;timereceived&quot;: 1531660754,\n  &quot;bip125-replaceable&quot;: &quot;no&quot;,\n  &quot;details&quot;: [\n    {\n      &quot;account&quot;: &quot;&quot;,\n      &quot;address&quot;: &quot;2NDhNJBynBdrFFkXJJscPhnocwLiiyzoEtE&quot;,\n      &quot;category&quot;: &quot;send&quot;,\n      &quot;amount&quot;: -0.50000000,\n      &quot;vout&quot;: 0,\n      &quot;fee&quot;: -0.00000241,\n      &quot;abandoned&quot;: false\n    }\n  ],\n  &quot;hex&quot;: &quot;0200000000010191ea8abf09f4acc6f549a2623524597640a006cac030a01c8b119f1957389f2501000000171600145741edc69bb806dffed747e41dcd8d08bf96d089feffffff0280f0fa020000000017a914e054443696a6bcd99e732480487f7168e1afa6fa87cfe0e4000000000017a9148337d4673ef5d665e33c67f6a9751ee5074867188702463043021f60da1356671f1eefa5c872bce2ee0a624ac94e89eae07b7446684b02efa47802203538911d9109d209ec1d8d75cf5f2140aa8ba21d125bee60685142c0eabefd760121035717f188ccb1f6c331b17a170ed9588dc15308ee589622f41968f915f7b2b9e971a71400&quot;\n}</code></pre></div>\n<p>*** Note: Wait for the transaction to confirm before trying to spend it in another input</p>\n<h3>5. Create SEND_TO and CHANGE addresses</h3>\n<p>Now the multisig address has received some funding (confirmed on chain), let’s try to create a transaction that spends these coins to some new addresses.</p>\n<p>However, first we should create 2 new addresses, one to receive money from the multisig address, and another to mimic a change address.</p>\n<p>*** Note: Since we are using createrawtransaction later on to create our transaction, no change address will be generated automatically, so it is important we generate it ourselves, see <a href=\"https://bitcoin.org/en/developer-examples#simple-raw-transaction\">bitcoin.org</a></p>\n<ol>\n<li><code class=\"language-text\">bitcoin-cli getnewaddress</code></li>\n</ol>\n<p>Example Output: MULTISIG<em>SEND</em>TO_ADDR</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2MudNu8VFhb1McRMuEBQa2c1e87FpSji8Qs</code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">bitcoin-cli getnewaddress</code></li>\n</ol>\n<p>Example Output: MULTISIG<em>CHANGE</em>ADDR</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2Mtbs7uSqcphyByHadbmtifr78bJpkpZpCJ</code></pre></div>\n<h3>6. Understanding VIN/VOUT</h3>\n<p>In order to send coins from our multisig address to another one we need to understand VIN and VOUT.</p>\n<p>For example. If you look at the following <a href=\"https://blockexplorer.com/tx/cafafbae95de6734b2ebffeff37c9a23fcc3977b70fbf856518703bbe0e41015\">transaction</a></p>\n<p>It has 4 inputs (VIN: 0, 1, 2, 3, 4) that spends coins to 2 outputs (VOUT: 0, 1). The VOUT for the output for coins to </p>\n<ul>\n<li><code class=\"language-text\">1NQq4PsRYRw2Gjcqd4BaH4tUaTFT9scn76</code> = 0 </li>\n<li><code class=\"language-text\">1NtiqTLrVGMrMV8qDbi5L12bCQ6oGV5sKh</code> = 1</li>\n</ul>\n<p>It is important to understand this since you need to use the correct VOUT of the transaction sending coins to our multisig address in order to spend them again.</p>\n<h3>7. Create RAW transaction</h3>\n<p> To send money from our multisig addredss we need to use the <code class=\"language-text\">&lt;TXID&gt;</code> of the transaction where we sent money TO our multisig address. For the <code class=\"language-text\">&lt;VOUT&gt;</code>, it should be the index (starting at 0) of the output of that funding transaction that sent coins to our multisig address. Since I funded my multisig address with 0.5 BTC, I’m sending 0.45 to <code class=\"language-text\">&lt;MULTISIG_SEND_TO_ADDR&gt;</code> and 0.049 to <code class=\"language-text\">&lt;MULTISIG_CHANGE_ADDR&gt;</code>, leaving 0.001 BTC to be claimed as fee by the miner.</p>\n<p><code class=\"language-text\">bitcoin-cli createrawtransaction &quot;[{\\&quot;txid\\&quot;:\\&quot;&lt;TXID&gt;\\&quot;, \\&quot;vout\\&quot;: 0 }]&quot; &quot;{ \\&quot;&lt;MULTISIG_SEND_TO_ADDR&gt;\\&quot;:0.45, \\&quot;&lt;MULTISIG_CHANGE_ADDR&gt;\\&quot;: 0.049 }&quot;</code></p>\n<p>Example Output: RAW<em>TX</em>HEX</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">02000000012fdf9de5f29d8917b36e844d510d6970e93d263f7ccb26c1d0d6d1e70531825b0000000000ffffffff0240a5ae020000000017a91423c27aee8feaf001906c0aab56a1c9340b4e8d6d87a0c44a000000000017a914e054443696a6bcd99e732480487f7168e1afa6fa8700000000</code></pre></div>\n<p>To see the details of this raw transaction run:</p>\n<p><code class=\"language-text\">bitcoin-cli decoderawtransaction RAW_TX_HEX</code></p>\n<p>Example Output: RAW<em>TX / SCRIPT</em>PUB<em>KEY</em>HEX</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;txid&quot;: &quot;730ab6e3be390979268b9a1bd6fbd966d874844d1896d99bef69380f154efd93&quot;,\n  &quot;hash&quot;: &quot;730ab6e3be390979268b9a1bd6fbd966d874844d1896d99bef69380f154efd93&quot;,\n  &quot;version&quot;: 2,\n  &quot;size&quot;: 115,\n  &quot;vsize&quot;: 115,\n  &quot;locktime&quot;: 0,\n  &quot;vin&quot;: [\n    {\n      &quot;txid&quot;: &quot;5b823105e7d1d6d0c126cb7c3f263de970690d514d846eb317899df2e59ddf2f&quot;,\n      &quot;vout&quot;: 0,\n      &quot;scriptSig&quot;: {\n        &quot;asm&quot;: &quot;&quot;,\n        &quot;hex&quot;: &quot;&quot;\n      },\n      &quot;sequence&quot;: 4294967295\n    }\n  ],\n  &quot;vout&quot;: [\n    {\n      &quot;value&quot;: 0.45000000,\n      &quot;n&quot;: 0,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_HASH160 23c27aee8feaf001906c0aab56a1c9340b4e8d6d OP_EQUAL&quot;,\n        &quot;hex&quot;: &quot;a91423c27aee8feaf001906c0aab56a1c9340b4e8d6d87&quot;, // &lt;-- This is the SCRIPT_PUB_KEY_HEX\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;scripthash&quot;,\n        &quot;addresses&quot;: [\n          &quot;2MvWJcigHkgMA8TRtXBhzD7whRfUsBwArU3&quot;\n        ]\n      }\n    },\n    {\n      &quot;value&quot;: 0.04900000,\n      &quot;n&quot;: 1,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_HASH160 e054443696a6bcd99e732480487f7168e1afa6fa OP_EQUAL&quot;,\n        &quot;hex&quot;: &quot;a914e054443696a6bcd99e732480487f7168e1afa6fa87&quot;, // &lt;-- This is the SCRIPT_PUB_KEY_HEX\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;scripthash&quot;,\n        &quot;addresses&quot;: [\n          &quot;2NDhNJBynBdrFFkXJJscPhnocwLiiyzoEtE&quot;\n        ]\n      }\n    }\n  ]\n}</code></pre></div>\n<h3>8. Sign the transaction</h3>\n<p>To sign the transaction, you need the private key of at least m/n public keys used to create the address, where <code class=\"language-text\">m</code> is the <code class=\"language-text\">&lt;REQUIRED_SIGS&gt;</code> used to create the address. </p>\n<p>In order to get the private key of one of our generate addresses run:</p>\n<p><code class=\"language-text\">bitcoin-cli dumpprivkey &lt;ADDR(n)&gt;</code></p>\n<p>Example Output: PRIVKEY(n)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cUyDg4c17DQPXjVdY2wum22fkMSMcHhrQKWgQ75vFPJupkYsf4qT</code></pre></div>\n<p>Once we have <code class=\"language-text\">m</code> (in the example 2) private keys from the addresses used to create the multisig address, we can now sign the raw transaction:</p>\n<p><code class=\"language-text\">bitcoin-cli signrawtransaction &lt;RAW_TX_HEX&gt; &quot;[{\\&quot;txid\\&quot;:\\&quot;&lt;TXID&gt;\\&quot;, \\&quot;vout\\&quot;: &lt;VOUT&gt;, \\&quot;scriptPubKey\\&quot;: \\&quot;&lt;SCRIPT_PUB_KEY_HEX&gt;\\&quot;, \\&quot;redeemScript\\&quot;:\\&quot;&lt;REDEEM_SCRIPT&gt;\\&quot; }]&quot; &quot;[\\&quot;&lt;PRIVKEY(0)&gt;\\&quot;, \\&quot;&lt;PRIVKEY(1)&gt;\\&quot;]&quot;</code></p>\n<p>*** Note: From what I could tell, the <code class=\"language-text\">&lt;SCRIPT_PUB_KEY_HEX&gt;</code> isn’t really used. Might be wrong about that</p>\n<p>Example Output: SIGNED<em>RAW</em>TX </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;hex&quot;: &quot;02000000012fdf9de5f29d8917b36e844d510d6970e93d263f7ccb26c1d0d6d1e70531825b00000000fdfe0000483045022100b54e338a6d049fa21b329e390eb0c906c85243a7f92049342c37da04c378c46e0220314c7723657d5ce172d1bc1b603c1db4cb376208016a3a9edaa20a13ac94fb950148304502210083f8f845899b59381e68e889ed7eeb9b2e7ca7bb39b2e7c79fab52fff3bce1310220582be5227ba69ec0a03f327746bed569dfb70b402a657c627d8c34a6218e7505014c69522103c8d1554f1029e6fa737b086b408f56a4f468541671230a4288e1f0290051aba621023af945dee9e7fdad745b62b817347eaf0efef84f752f03fbb80a82de61bdd6f62103f18f621896dd4954b593c56fe74530c139c54e372c52a43c15a5a4e89d26cf9153aeffffffff0240a5ae020000000017a91423c27aee8feaf001906c0aab56a1c9340b4e8d6d87a0c44a000000000017a914e054443696a6bcd99e732480487f7168e1afa6fa8700000000&quot;,\n  &quot;complete&quot;: true\n}</code></pre></div>\n<p>Use the hex code as <code class=\"language-text\">&lt;SIGNED_RAW_TX_HEX&gt;</code></p>\n<h3>9. Send the RAW transaction</h3>\n<p>Now we have a valid and signed raw transaction, we can now broadcast this to the bitcoin network.</p>\n<p><code class=\"language-text\">bitcoin-cli sendrawtransaction &lt;SIGNED_RAW_TX_HEX&gt;</code></p>\n<p>Example Output: MULTISIG_TXID</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">b964bfc624e4540b180a19e68eb25a6dcb25a3c5545513f82334dda363d3c0d0</code></pre></div>\n<p>Check to see if the transaction is on the network</p>\n<p><code class=\"language-text\">bitcoin-cli gettransaction &lt;MULTISIG_TXID&gt;</code></p>\n<p>Example Output: FINAL_TX</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;amount&quot;: 0.45000000,\n  &quot;confirmations&quot;: 0,\n  &quot;trusted&quot;: false,\n  &quot;txid&quot;: &quot;b964bfc624e4540b180a19e68eb25a6dcb25a3c5545513f82334dda363d3c0d0&quot;,\n  &quot;walletconflicts&quot;: [\n  ],\n  &quot;time&quot;: 1531668769,\n  &quot;timereceived&quot;: 1531668769,\n  &quot;bip125-replaceable&quot;: &quot;no&quot;,\n  &quot;details&quot;: [\n    {\n      &quot;account&quot;: &quot;test&quot;,\n      &quot;address&quot;: &quot;2MvWJcigHkgMA8TRtXBhzD7whRfUsBwArU3&quot;,\n      &quot;category&quot;: &quot;receive&quot;,\n      &quot;amount&quot;: 0.45000000,\n      &quot;label&quot;: &quot;test&quot;,\n      &quot;vout&quot;: 0\n    }\n  ],\n  &quot;hex&quot;: &quot;02000000012fdf9de5f29d8917b36e844d510d6970e93d263f7ccb26c1d0d6d1e70531825b00000000fdfe0000483045022100b54e338a6d049fa21b329e390eb0c906c85243a7f92049342c37da04c378c46e0220314c7723657d5ce172d1bc1b603c1db4cb376208016a3a9edaa20a13ac94fb950148304502210083f8f845899b59381e68e889ed7eeb9b2e7ca7bb39b2e7c79fab52fff3bce1310220582be5227ba69ec0a03f327746bed569dfb70b402a657c627d8c34a6218e7505014c69522103c8d1554f1029e6fa737b086b408f56a4f468541671230a4288e1f0290051aba621023af945dee9e7fdad745b62b817347eaf0efef84f752f03fbb80a82de61bdd6f62103f18f621896dd4954b593c56fe74530c139c54e372c52a43c15a5a4e89d26cf9153aeffffffff0240a5ae020000000017a91423c27aee8feaf001906c0aab56a1c9340b4e8d6d87a0c44a000000000017a914e054443696a6bcd99e732480487f7168e1afa6fa8700000000&quot;\n}</code></pre></div>\n<p>That’s it. </p>\n<p>We have successfully, created a multisig address, funded it with some coins, created a raw transaction spending the coins from the multisig address, signed it using 2/3 private keys and broadcast the transaction to the bitcoin network</p>","fields":{"tagSlugs":["/tags/bitcoin-cli/","/tags/docker/","/tags/bitcoin/","/tags/multisig/"]},"frontmatter":{"title":"Setting up bitcoin multisig with bitcoin-cli","tags":["bitcoin-cli","Docker","Bitcoin","Multisig"],"date":"2018-07-10","description":"Setup and sign bitcoin multisig address with bitcoin-cli"}}},"pageContext":{"slug":"/posts/bitcoin-multisig-cli/"}}